{\rtf1\ansi\ansicpg1252\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier-Bold;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-BoldOblique;
\f3\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue109;\red82\green0\blue103;\red15\green112\blue3;
\red0\green0\blue254;\red109\green109\blue109;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c42745;\csgenericrgb\c32157\c0\c40392;\csgenericrgb\c5882\c43922\c1176;
\csgenericrgb\c0\c0\c99608;\csgenericrgb\c42745\c42745\c42745;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs26 \cf2 import 
\f1\b0 \cf0 Animals.DomesticAnimals;\

\f0\b \cf2 import 
\f1\b0 \cf0 LevelDesign.Bucket;\

\f0\b \cf2 import 
\f1\b0 \cf0 LevelDesign.Ingredient;\

\f0\b \cf2 import 
\f1\b0 \cf0 LevelDesign.Level;\

\f0\b \cf2 import 
\f1\b0 \cf0 LevelDesign.Map;\

\f0\b \cf2 import 
\f1\b0 \cf0 com.google.gson.Gson;\

\f0\b \cf2 import 
\f1\b0 \cf0 com.google.gson.GsonBuilder;\
\

\f0\b \cf2 import 
\f1\b0 \cf0 java.io.*;\

\f0\b \cf2 import 
\f1\b0 \cf0 java.nio.file.Files;\

\f0\b \cf2 import 
\f1\b0 \cf0 java.nio.file.Paths;\

\f0\b \cf2 import 
\f1\b0 \cf0 java.util.ArrayList;\

\f0\b \cf2 import 
\f1\b0 \cf0 java.util.Arrays;\

\f0\b \cf2 import 
\f1\b0 \cf0 java.util.List;\
\

\f0\b \cf2 public class 
\f1\b0 \cf0 Manager \{\
    
\f0\b \cf2 public static final 
\f1\b0 \cf0 String 
\f2\i\b \cf3 ANSI_RED 
\f1\i0\b0 \cf0 = 
\f0\b \cf4 "\cf2 \\u001B\cf4 [31m"
\f1\b0 \cf0 ;\
    
\f0\b \cf2 public static final 
\f1\b0 \cf0 String 
\f2\i\b \cf3 ANSI_RESET 
\f1\i0\b0 \cf0 = 
\f0\b \cf4 "\cf2 \\u001B\cf4 [0m"
\f1\b0 \cf0 ;\
    
\f0\b \cf2 public static final 
\f1\b0 \cf0 String 
\f2\i\b \cf3 ANSI_CYAN 
\f1\i0\b0 \cf0 = 
\f0\b \cf4 "\cf2 \\u001B\cf4 [36m"
\f1\b0 \cf0 ;\
    
\f0\b \cf2 public static final 
\f1\b0 \cf0 String 
\f2\i\b \cf3 ANSI_YELLOW 
\f1\i0\b0 \cf0 = 
\f0\b \cf4 "\cf2 \\u001B\cf4 [33m"
\f1\b0 \cf0 ;\
\
\
\
\
    ArrayList<Level> 
\f0\b \cf3 levels 
\f1\b0 \cf0 = 
\f0\b \cf2 new 
\f1\b0 \cf0 ArrayList<>();\
\
    
\f0\b \cf2 private 
\f1\b0 \cf0 ArrayList<LoginUser> 
\f0\b \cf3 Users 
\f1\b0 \cf0 = 
\f0\b \cf2 new 
\f1\b0 \cf0 ArrayList<>();\
\
    Level 
\f0\b \cf3 level 
\f1\b0 \cf0 = 
\f0\b \cf2 new 
\f1\b0 \cf0 Level();\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 Buy(String name, Level level) \{\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (name.equals(
\f0\b \cf4 "buffalo"
\f1\b0 \cf0 )) \{\
            DomesticAnimals.Buffalo buffalo = 
\f0\b \cf2 new 
\f1\b0 \cf0 DomesticAnimals.Buffalo(\cf5 1\cf0 , \cf5 1\cf0 );\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 coin 
\f1\b0 \cf0 >= buffalo.
\f0\b \cf3 BuyPrice
\f1\b0 \cf0 ) \{\
                level.
\f0\b \cf3 buffalos
\f1\b0 \cf0 .add(buffalo);\
                level.
\f0\b \cf3 coin 
\f1\b0 \cf0 -= buffalo.
\f0\b \cf3 BuyPrice
\f1\b0 \cf0 ;\
            \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "NOT ENOUGH COIN TO BUY!"
\f1\b0 \cf0 );\
            \}\
        \} 
\f0\b \cf2 else if 
\f1\b0 \cf0 (name.equals(
\f0\b \cf4 "turkey"
\f1\b0 \cf0 )) \{\
            DomesticAnimals.Turkey turkey = 
\f0\b \cf2 new 
\f1\b0 \cf0 DomesticAnimals.Turkey(\cf5 1\cf0 , \cf5 1\cf0 );\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 coin 
\f1\b0 \cf0 >= turkey.
\f0\b \cf3 BuyPrice
\f1\b0 \cf0 ) \{\
                level.
\f0\b \cf3 turkies
\f1\b0 \cf0 .add(turkey);\
                level.
\f0\b \cf3 coin 
\f1\b0 \cf0 -= turkey.
\f0\b \cf3 BuyPrice
\f1\b0 \cf0 ;\
            \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "NOT ENOUGH COIN TO BUY!"
\f1\b0 \cf0 );\
            \}\
        \} 
\f0\b \cf2 else if 
\f1\b0 \cf0 (name.equals(
\f0\b \cf4 "chicken"
\f1\b0 \cf0 )) \{\
            DomesticAnimals.Chicken chicken = 
\f0\b \cf2 new 
\f1\b0 \cf0 DomesticAnimals.Chicken(\cf5 1\cf0 , \cf5 1\cf0 );\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 coin 
\f1\b0 \cf0 >= chicken.
\f0\b \cf3 BuyPrice
\f1\b0 \cf0 ) \{\
                level.
\f0\b \cf3 chickens
\f1\b0 \cf0 .add(chicken);\
                level.
\f0\b \cf3 coin 
\f1\b0 \cf0 -= chicken.
\f0\b \cf3 BuyPrice
\f1\b0 \cf0 ;\
            \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "NOT ENOUGH COIN TO BUY!"
\f1\b0 \cf0 );\
            \}\
        \}\
    \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 PickUp(
\f0\b \cf2 int 
\f1\b0 \cf0 x, 
\f0\b \cf2 int 
\f1\b0 \cf0 y, Level level) \{\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (level != 
\f0\b \cf2 null
\f1\b0 \cf0 ) \{\
            
\f0\b \cf2 int 
\f1\b0 \cf0 t = \cf5 0\cf0 ;\
            
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .size(); i++) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .get(i).
\f0\b \cf3 x 
\f1\b0 \cf0 == x && level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .get(i).
\f0\b \cf3 y 
\f1\b0 \cf0 == y) \{\
                    t = \cf5 1\cf0 ;\
                    
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 capacity 
\f1\b0 \cf0 >= level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .get(i).
\f0\b \cf3 size
\f1\b0 \cf0 ) \{\
                        level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .add(level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .get(i).
\f0\b \cf3 name
\f1\b0 \cf0 );\
                        level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 quantities
\f1\b0 \cf0 .add(\cf5 1\cf0 );\
                        level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 capacity 
\f1\b0 \cf0 -= level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .get(i).
\f0\b \cf3 size
\f1\b0 \cf0 ;\
                        level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .remove(i);\
                        
\f0\b \cf2 break
\f1\b0 \cf0 ;\
                    \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                        System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is not enough space in the storage!"
\f1\b0 \cf0 );\
                    \}\
                \}\
            \}\
\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (t == \cf5 0\cf0 ) \{\
                System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "Please enter valid coordinates!"
\f1\b0 \cf0 );\
            \}\
        \}\
    \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 Expirings(Level level) \{\
        
\f0\b \cf2 int 
\f1\b0 \cf0 a = level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .size();\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < a; i++) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .get(i).
\f0\b \cf3 expire 
\f1\b0 \cf0 == \cf5 0\cf0 ) \{\
                level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .remove(i);\
            \}\
        \}\
    \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 Well(Level level, 
\f0\b \cf2 int 
\f1\b0 \cf0 counter) \{\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 bucket
\f1\b0 \cf0 .
\f0\b \cf3 duration 
\f1\b0 \cf0 == level.
\f0\b \cf3 bucket
\f1\b0 \cf0 .
\f0\b \cf3 maxDuration
\f1\b0 \cf0 ) \{\
            level.
\f0\b \cf3 bucket
\f1\b0 \cf0 .
\f0\b \cf3 full 
\f1\b0 \cf0 = 
\f0\b \cf2 true
\f1\b0 \cf0 ;\
            level.
\f0\b \cf3 bucket
\f1\b0 \cf0 .
\f0\b \cf3 capacity 
\f1\b0 \cf0 = \cf5 5\cf0 ;\
            counter = \cf5 0\cf0 ;\
        \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
            level.
\f0\b \cf3 bucket
\f1\b0 \cf0 .
\f0\b \cf3 duration 
\f1\b0 \cf0 = counter;\
            
\f3\i \cf6 // counter bayad ziad shavad\
        
\f1\i0 \cf0 \}\
    \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 Plant(
\f0\b \cf2 int 
\f1\b0 \cf0 x, 
\f0\b \cf2 int 
\f1\b0 \cf0 y, Level level) \{\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (x >= \cf5 1 \cf0 && x <= level.
\f0\b \cf3 map
\f1\b0 \cf0 .
\f0\b \cf3 length 
\f1\b0 \cf0 && y >= \cf5 1 \cf0 && y <= level.
\f0\b \cf3 map
\f1\b0 \cf0 .
\f0\b \cf3 height
\f1\b0 \cf0 ) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 bucket
\f1\b0 \cf0 .
\f0\b \cf3 capacity 
\f1\b0 \cf0 > \cf5 0\cf0 ) \{\
                level.
\f0\b \cf3 map
\f1\b0 \cf0 .
\f0\b \cf3 map
\f1\b0 \cf0 [x - \cf5 1\cf0 ][y - \cf5 1\cf0 ].
\f0\b \cf3 grass
\f1\b0 \cf0 ++;\
                level.
\f0\b \cf3 bucket
\f1\b0 \cf0 .
\f0\b \cf3 capacity
\f1\b0 \cf0 --;\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 bucket
\f1\b0 \cf0 .
\f0\b \cf3 capacity 
\f1\b0 \cf0 == \cf5 0\cf0 ) \{\
                    level.
\f0\b \cf3 bucket
\f1\b0 \cf0 .
\f0\b \cf3 full 
\f1\b0 \cf0 = 
\f0\b \cf2 false
\f1\b0 \cf0 ;\
                    level.
\f0\b \cf3 bucket
\f1\b0 \cf0 .
\f0\b \cf3 capacity 
\f1\b0 \cf0 = \cf5 0\cf0 ;\
                    level.
\f0\b \cf3 bucket
\f1\b0 \cf0 .
\f0\b \cf3 duration 
\f1\b0 \cf0 = -\cf5 1\cf0 ;\
\
                \}\
            \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "Bucket is empty! Fill it again!"
\f1\b0 \cf0 );\
            \}\
        \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
            System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "Coordinates are not valid! Try again!"
\f1\b0 \cf0 );\
        \}\
    \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 Build(Level level, String name) \{\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (name.equals(
\f0\b \cf4 "WeaveFactory"
\f1\b0 \cf0 )) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 == 
\f0\b \cf2 false
\f1\b0 \cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 coin 
\f1\b0 \cf0 >= level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 buildPrice
\f1\b0 \cf0 ) \{\
                    level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 = 
\f0\b \cf2 true
\f1\b0 \cf0 ;\
                    level.
\f0\b \cf3 coin 
\f1\b0 \cf0 -= level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 buildPrice
\f1\b0 \cf0 ;\
                \} 
\f0\b \cf2 else\
                    
\f1\b0 \cf0 System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is not enough money to build the factory."
\f1\b0 \cf0 );\
            \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "This factory can't be built again."
\f1\b0 \cf0 );\
            \}\
        \} 
\f0\b \cf2 else if 
\f1\b0 \cf0 (name.equals(
\f0\b \cf4 "MillFactory"
\f1\b0 \cf0 )) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 == 
\f0\b \cf2 false
\f1\b0 \cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 coin 
\f1\b0 \cf0 >= level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 buildPrice
\f1\b0 \cf0 ) \{\
                    level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 = 
\f0\b \cf2 true
\f1\b0 \cf0 ;\
                    level.
\f0\b \cf3 coin 
\f1\b0 \cf0 -= level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 buildPrice
\f1\b0 \cf0 ;\
                \} 
\f0\b \cf2 else\
                    
\f1\b0 \cf0 System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is not enough money to build the factory."
\f1\b0 \cf0 );\
            \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "This factory can't be built again."
\f1\b0 \cf0 );\
            \}\
        \} 
\f0\b \cf2 else if 
\f1\b0 \cf0 (name.equals(
\f0\b \cf4 "MilkFactory"
\f1\b0 \cf0 )) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 == 
\f0\b \cf2 false
\f1\b0 \cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 coin 
\f1\b0 \cf0 >= level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 buildPrice
\f1\b0 \cf0 ) \{\
                    level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 = 
\f0\b \cf2 true
\f1\b0 \cf0 ;\
                    level.
\f0\b \cf3 coin 
\f1\b0 \cf0 -= level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 buildPrice
\f1\b0 \cf0 ;\
                \} 
\f0\b \cf2 else\
                    
\f1\b0 \cf0 System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is not enough money to build the factory."
\f1\b0 \cf0 );\
            \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "This factory can't be built again."
\f1\b0 \cf0 );\
            \}\
\
        \} 
\f0\b \cf2 else if 
\f1\b0 \cf0 (name.equals(
\f0\b \cf4 "Bakery"
\f1\b0 \cf0 )) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 == 
\f0\b \cf2 false
\f1\b0 \cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 coin 
\f1\b0 \cf0 >= level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 buildPrice
\f1\b0 \cf0 ) \{\
                    level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 = 
\f0\b \cf2 true
\f1\b0 \cf0 ;\
                    level.
\f0\b \cf3 coin 
\f1\b0 \cf0 -= level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 buildPrice
\f1\b0 \cf0 ;\
                \} 
\f0\b \cf2 else\
                    
\f1\b0 \cf0 System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is not enough money to build the factory."
\f1\b0 \cf0 );\
            \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "This factory can't be built again."
\f1\b0 \cf0 );\
            \}\
\
        \} 
\f0\b \cf2 else if 
\f1\b0 \cf0 (name.equals(
\f0\b \cf4 "SewingFactory"
\f1\b0 \cf0 )) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 == 
\f0\b \cf2 false
\f1\b0 \cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 coin 
\f1\b0 \cf0 >= level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 buildPrice
\f1\b0 \cf0 ) \{\
                    level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 = 
\f0\b \cf2 true
\f1\b0 \cf0 ;\
                    level.
\f0\b \cf3 coin 
\f1\b0 \cf0 -= level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 buildPrice
\f1\b0 \cf0 ;\
                \} 
\f0\b \cf2 else\
                    
\f1\b0 \cf0 System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is not enough money to build the factory."
\f1\b0 \cf0 );\
            \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "This factory can't be built again."
\f1\b0 \cf0 );\
            \}\
\
        \} 
\f0\b \cf2 else if 
\f1\b0 \cf0 (name.equals(
\f0\b \cf4 "IceFactory"
\f1\b0 \cf0 )) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 == 
\f0\b \cf2 false
\f1\b0 \cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 coin 
\f1\b0 \cf0 >= level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 buildPrice
\f1\b0 \cf0 ) \{\
                    level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 = 
\f0\b \cf2 true
\f1\b0 \cf0 ;\
                    level.
\f0\b \cf3 coin 
\f1\b0 \cf0 -= level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 buildPrice
\f1\b0 \cf0 ;\
                \} 
\f0\b \cf2 else\
                    
\f1\b0 \cf0 System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is not enough money to build the factory."
\f1\b0 \cf0 );\
            \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "This factory can't be built again."
\f1\b0 \cf0 );\
            \}\
\
        \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
            System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "Not a valid name!"
\f1\b0 \cf0 );\
        \}\
    \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 Work(Level level, String name) \{\
        String[] names = \{
\f0\b \cf4 "WeaveFactory"
\f1\b0 \cf0 , 
\f0\b \cf4 "MillFactory"
\f1\b0 \cf0 , 
\f0\b \cf4 "MilkFactory"
\f1\b0 \cf0 , 
\f0\b \cf4 "Bakery"
\f1\b0 \cf0 , 
\f0\b \cf4 "SewingFactory"
\f1\b0 \cf0 , 
\f0\b \cf4 "IceFactory"
\f1\b0 \cf0 \};\
        
\f0\b \cf2 int 
\f1\b0 \cf0 a = -\cf5 1\cf0 ;\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < names.
\f0\b \cf3 length
\f1\b0 \cf0 ; i++) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (name.equals(names[i])) \{\
                a = i;\
                
\f0\b \cf2 break
\f1\b0 \cf0 ;\
            \}\
        \}\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (a == -\cf5 1\cf0 ) \{\
            System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "Not a valid name."
\f1\b0 \cf0 );\
        \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
            
\f0\b \cf2 int 
\f1\b0 \cf0 t = \cf5 0\cf0 ;\
            
\f0\b \cf2 int 
\f1\b0 \cf0 r = level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .size();\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (a == \cf5 0\cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence
\f1\b0 \cf0 ) \{\
                    
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 duration 
\f1\b0 \cf0 == -\cf5 1\cf0 ) \{\
                        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < r; i++) \{\
                            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .get(i).equals(level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredient
\f1\b0 \cf0 )) \{\
                                t = \cf5 1\cf0 ;\
                                level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .remove(i);\
                                level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 quantities
\f1\b0 \cf0 .remove(i);\
                                
\f3\i \cf6 // Production\
                            
\f1\i0 \cf0 \}\
                        \}\
                        
\f0\b \cf2 if 
\f1\b0 \cf0 (t == \cf5 0\cf0 )\
                            System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is not enough ingredient to start!"
\f1\b0 \cf0 );\
                    \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                        System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "The factory is working now, You must wait to end the production."
\f1\b0 \cf0 );\
                    \}\
                \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                    System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "You must first build the factory."
\f1\b0 \cf0 );\
                \}\
            \}\
\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (a == \cf5 1\cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence
\f1\b0 \cf0 ) \{\
                    
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 duration 
\f1\b0 \cf0 == -\cf5 1\cf0 ) \{\
                        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < r; i++) \{\
                            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .get(i).equals(level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredient
\f1\b0 \cf0 )) \{\
                                t = \cf5 1\cf0 ;\
                                level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .remove(i);\
                                level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 quantities
\f1\b0 \cf0 .remove(i);\
                                
\f3\i \cf6 // Production\
                            
\f1\i0 \cf0 \}\
                        \}\
                        
\f0\b \cf2 if 
\f1\b0 \cf0 (t == \cf5 0\cf0 )\
                            System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is not enough ingredient to start!"
\f1\b0 \cf0 );\
                    \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                        System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "The factory is working now, You must wait to end the production."
\f1\b0 \cf0 );\
                    \}\
                \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                    System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "You must first build the factory."
\f1\b0 \cf0 );\
                \}\
            \}\
\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (a == \cf5 2\cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence
\f1\b0 \cf0 ) \{\
                    
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 duration 
\f1\b0 \cf0 == -\cf5 1\cf0 ) \{\
                        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < r; i++) \{\
                            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .get(i).equals(level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredient
\f1\b0 \cf0 )) \{\
                                t = \cf5 1\cf0 ;\
                                level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .remove(i);\
                                level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 quantities
\f1\b0 \cf0 .remove(i);\
                                
\f3\i \cf6 // Production\
                            
\f1\i0 \cf0 \}\
                        \}\
                        
\f0\b \cf2 if 
\f1\b0 \cf0 (t == \cf5 0\cf0 )\
                            System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is not enough ingredient to start!"
\f1\b0 \cf0 );\
                    \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                        System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "The factory is working now, You must wait to end the production."
\f1\b0 \cf0 );\
                    \}\
                \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                    System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "You must first build the factory."
\f1\b0 \cf0 );\
                \}\
            \}\
\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (a == \cf5 3\cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 existence
\f1\b0 \cf0 ) \{\
                    
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 duration 
\f1\b0 \cf0 == -\cf5 1\cf0 ) \{\
                        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < r; i++) \{\
                            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .get(i).equals(level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 ingredient
\f1\b0 \cf0 )) \{\
                                t = \cf5 1\cf0 ;\
                                level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .remove(i);\
                                level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 quantities
\f1\b0 \cf0 .remove(i);\
                                
\f3\i \cf6 // Production\
                            
\f1\i0 \cf0 \}\
                        \}\
                        
\f0\b \cf2 if 
\f1\b0 \cf0 (t == \cf5 0\cf0 )\
                            System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is not enough ingredient to start!"
\f1\b0 \cf0 );\
                    \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                        System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "The factory is working now, You must wait to end the production."
\f1\b0 \cf0 );\
                    \}\
                \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                    System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "You must first build the factory."
\f1\b0 \cf0 );\
                \}\
            \}\
\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (a == \cf5 4\cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence
\f1\b0 \cf0 ) \{\
                    
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 duration 
\f1\b0 \cf0 == -\cf5 1\cf0 ) \{\
                        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < r; i++) \{\
                            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .get(i).equals(level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredient
\f1\b0 \cf0 )) \{\
                                t = \cf5 1\cf0 ;\
                                level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .remove(i);\
                                level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 quantities
\f1\b0 \cf0 .remove(i);\
                                
\f3\i \cf6 // Production\
                            
\f1\i0 \cf0 \}\
                        \}\
                        
\f0\b \cf2 if 
\f1\b0 \cf0 (t == \cf5 0\cf0 )\
                            System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is not enough ingredient to start!"
\f1\b0 \cf0 );\
                    \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                        System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "The factory is working now, You must wait to end the production."
\f1\b0 \cf0 );\
                    \}\
                \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                    System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "You must first build the factory."
\f1\b0 \cf0 );\
                \}\
            \}\
\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (a == \cf5 5\cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence
\f1\b0 \cf0 ) \{\
                    
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 duration 
\f1\b0 \cf0 == -\cf5 1\cf0 ) \{\
                        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < r; i++) \{\
                            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .get(i).equals(level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredient
\f1\b0 \cf0 )) \{\
                                t = \cf5 1\cf0 ;\
                                level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .remove(i);\
                                level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 quantities
\f1\b0 \cf0 .remove(i);\
                                
\f3\i \cf6 // Production\
                            
\f1\i0 \cf0 \}\
                        \}\
                        
\f0\b \cf2 if 
\f1\b0 \cf0 (t == \cf5 0\cf0 )\
                            System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is not enough ingredient to start!"
\f1\b0 \cf0 );\
                    \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                        System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "The factory is working now, You must wait to end the production."
\f1\b0 \cf0 );\
                    \}\
                \} 
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
                    System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "You must first build the factory."
\f1\b0 \cf0 );\
                \}\
            \}\
        \}\
    \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 Cage(
\f0\b \cf2 int 
\f1\b0 \cf0 x, 
\f0\b \cf2 int 
\f1\b0 \cf0 y, Level level, 
\f0\b \cf2 int 
\f1\b0 \cf0 counter) \{\
        
\f0\b \cf2 int 
\f1\b0 \cf0 l = -\cf5 1\cf0 ;\
        
\f0\b \cf2 int 
\f1\b0 \cf0 b = -\cf5 1\cf0 ;\
        
\f0\b \cf2 int 
\f1\b0 \cf0 t = -\cf5 1\cf0 ;\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < level.
\f0\b \cf3 lions
\f1\b0 \cf0 .size(); i++) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 lions
\f1\b0 \cf0 .get(i).
\f0\b \cf3 x 
\f1\b0 \cf0 == x && level.
\f0\b \cf3 lions
\f1\b0 \cf0 .get(i).
\f0\b \cf3 y 
\f1\b0 \cf0 == y) \{\
                l = i;\
                
\f0\b \cf2 break
\f1\b0 \cf0 ;\
            \}\
        \}\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (l != -\cf5 1\cf0 ) \{\
            
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < level.
\f0\b \cf3 bears
\f1\b0 \cf0 .size(); i++) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 bears
\f1\b0 \cf0 .get(i).
\f0\b \cf3 x 
\f1\b0 \cf0 == x && level.
\f0\b \cf3 bears
\f1\b0 \cf0 .get(i).
\f0\b \cf3 y 
\f1\b0 \cf0 == y) \{\
                    b = i;\
                    
\f0\b \cf2 break
\f1\b0 \cf0 ;\
                \}\
            \}\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (t != -\cf5 1\cf0 ) \{\
                
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .size(); i++) \{\
                    
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .get(i).
\f0\b \cf3 x 
\f1\b0 \cf0 == x && level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .get(i).
\f0\b \cf3 y 
\f1\b0 \cf0 == y) \{\
                        t = i;\
                        
\f0\b \cf2 break
\f1\b0 \cf0 ;\
                    \}\
                \}\
            \}\
        \}\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (l == -\cf5 1 \cf0 && t == -\cf5 1 \cf0 && b == -\cf5 1\cf0 ) \{\
            System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf4 "There is no wild animal in that coordination, choose wisely!"
\f1\b0 \cf0 );\
        \} 
\f0\b \cf2 else if 
\f1\b0 \cf0 (l != -\cf5 1\cf0 ) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (counter == level.
\f0\b \cf3 lions
\f1\b0 \cf0 .get(l).
\f0\b \cf3 cageP
\f1\b0 \cf0 ) \{\
                level.
\f0\b \cf3 lions
\f1\b0 \cf0 .get(l).
\f0\b \cf3 inCage 
\f1\b0 \cf0 = 
\f0\b \cf2 true
\f1\b0 \cf0 ;\
                level.
\f0\b \cf3 lions
\f1\b0 \cf0 .get(l).
\f0\b \cf3 speed 
\f1\b0 \cf0 = \cf5 0\cf0 ;\
            \}\
        \} 
\f0\b \cf2 else if 
\f1\b0 \cf0 (b != -\cf5 1\cf0 ) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (counter == level.
\f0\b \cf3 bears
\f1\b0 \cf0 .get(b).
\f0\b \cf3 cageP
\f1\b0 \cf0 ) \{\
                level.
\f0\b \cf3 bears
\f1\b0 \cf0 .get(b).
\f0\b \cf3 inCage 
\f1\b0 \cf0 = 
\f0\b \cf2 true
\f1\b0 \cf0 ;\
                level.
\f0\b \cf3 bears
\f1\b0 \cf0 .get(b).
\f0\b \cf3 speed 
\f1\b0 \cf0 = \cf5 0\cf0 ;\
            \}\
\
\
        \} 
\f0\b \cf2 else if 
\f1\b0 \cf0 (t != -\cf5 1\cf0 ) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (counter == level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .get(t).
\f0\b \cf3 cageP
\f1\b0 \cf0 ) \{\
                level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .get(t).
\f0\b \cf3 inCage 
\f1\b0 \cf0 = 
\f0\b \cf2 true
\f1\b0 \cf0 ;\
                level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .get(t).
\f0\b \cf3 speed 
\f1\b0 \cf0 = \cf5 0\cf0 ;\
            \}\
\
        \}\
    \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 CageCounter(Level level) \{\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < level.
\f0\b \cf3 lions
\f1\b0 \cf0 .size(); i++) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 lions
\f1\b0 \cf0 .get(i).
\f0\b \cf3 inCage
\f1\b0 \cf0 ) \{\
                level.
\f0\b \cf3 lions
\f1\b0 \cf0 .get(i).
\f0\b \cf3 inCageCounter
\f1\b0 \cf0 ++;\
            \}\
        \}\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < level.
\f0\b \cf3 bears
\f1\b0 \cf0 .size(); i++) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 bears
\f1\b0 \cf0 .get(i).
\f0\b \cf3 inCage
\f1\b0 \cf0 ) \{\
                level.
\f0\b \cf3 bears
\f1\b0 \cf0 .get(i).
\f0\b \cf3 inCageCounter
\f1\b0 \cf0 ++;\
            \}\
        \}\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .size(); i++) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .get(i).
\f0\b \cf3 inCage
\f1\b0 \cf0 ) \{\
                level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .get(i).
\f0\b \cf3 inCageCounter
\f1\b0 \cf0 ++;\
            \}\
        \}\
    \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 CageEnd(Level level) \{\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < level.
\f0\b \cf3 lions
\f1\b0 \cf0 .size(); i++) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 lions
\f1\b0 \cf0 .get(i).
\f0\b \cf3 inCageCounter 
\f1\b0 \cf0 == \cf5 5\cf0 ) \{\
                level.
\f0\b \cf3 lions
\f1\b0 \cf0 .remove(i);\
            \}\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 bears
\f1\b0 \cf0 .get(i).
\f0\b \cf3 inCageCounter 
\f1\b0 \cf0 == \cf5 5\cf0 ) \{\
                level.
\f0\b \cf3 bears
\f1\b0 \cf0 .remove(i);\
            \}\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .get(i).
\f0\b \cf3 inCageCounter 
\f1\b0 \cf0 == \cf5 5\cf0 ) \{\
                level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .remove(i);\
            \}\
        \}\
    \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 CageStore(Level level) \{\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < level.
\f0\b \cf3 lions
\f1\b0 \cf0 .size(); i++) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 lions
\f1\b0 \cf0 .get(i).
\f0\b \cf3 inCage
\f1\b0 \cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 capacity 
\f1\b0 \cf0 >= level.
\f0\b \cf3 lions
\f1\b0 \cf0 .get(i).
\f0\b \cf3 capacity
\f1\b0 \cf0 ) \{\
                    level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .add(
\f0\b \cf4 "lion"
\f1\b0 \cf0 );\
                    level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 quantities
\f1\b0 \cf0 .add(\cf5 1\cf0 );\
                    level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 capacity 
\f1\b0 \cf0 -= level.
\f0\b \cf3 lions
\f1\b0 \cf0 .get(i).
\f0\b \cf3 capacity
\f1\b0 \cf0 ;\
                \}\
            \}\
        \}\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < level.
\f0\b \cf3 bears
\f1\b0 \cf0 .size(); i++) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 bears
\f1\b0 \cf0 .get(i).
\f0\b \cf3 inCage
\f1\b0 \cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 capacity 
\f1\b0 \cf0 >= level.
\f0\b \cf3 bears
\f1\b0 \cf0 .get(i).
\f0\b \cf3 capacity
\f1\b0 \cf0 ) \{\
                    level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .add(
\f0\b \cf4 "bear"
\f1\b0 \cf0 );\
                    level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 quantities
\f1\b0 \cf0 .add(\cf5 1\cf0 );\
                    level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 capacity 
\f1\b0 \cf0 -= level.
\f0\b \cf3 bears
\f1\b0 \cf0 .get(i).
\f0\b \cf3 capacity
\f1\b0 \cf0 ;\
                \}\
            \}\
        \}\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .size(); i++) \{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .get(i).
\f0\b \cf3 inCage
\f1\b0 \cf0 ) \{\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 capacity 
\f1\b0 \cf0 >= level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .get(i).
\f0\b \cf3 capacity
\f1\b0 \cf0 ) \{\
                    level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 names
\f1\b0 \cf0 .add(
\f0\b \cf4 "tiger"
\f1\b0 \cf0 );\
                    level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 quantities
\f1\b0 \cf0 .add(\cf5 1\cf0 );\
                    level.
\f0\b \cf3 storage
\f1\b0 \cf0 .
\f0\b \cf3 capacity 
\f1\b0 \cf0 -= level.
\f0\b \cf3 tigers
\f1\b0 \cf0 .get(i).
\f0\b \cf3 capacity
\f1\b0 \cf0 ;\
                \}\
            \}\
        \}\
    \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 FactoryCounter(Level level)\{\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 && level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredientExistence
\f1\b0 \cf0 )\{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime 
\f1\b0 \cf0 >=level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 maxDuration
\f1\b0 \cf0 )\{\
                level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime 
\f1\b0 \cf0 = \cf5 0\cf0 ;\
                level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredientExistence 
\f1\b0 \cf0 = 
\f0\b \cf2 false
\f1\b0 \cf0 ;\
                Ingredient.Cloth product = 
\f0\b \cf2 new 
\f1\b0 \cf0 Ingredient.Cloth(\cf5 1\cf0 ,\cf5 1 \cf0 );\
                level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .add(product);\
            \}\
            
\f0\b \cf2 else
\f1\b0 \cf0 \{\
                level.
\f0\b \cf3 sewingFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime
\f1\b0 \cf0 ++;\
            \}\
        \}\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 && level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredientExistence
\f1\b0 \cf0 )\{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime 
\f1\b0 \cf0 >=level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 maxDuration
\f1\b0 \cf0 )\{\
                level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime 
\f1\b0 \cf0 = \cf5 0\cf0 ;\
                level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredientExistence 
\f1\b0 \cf0 = 
\f0\b \cf2 false
\f1\b0 \cf0 ;\
                Ingredient.Flour product = 
\f0\b \cf2 new 
\f1\b0 \cf0 Ingredient.Flour(\cf5 1\cf0 ,\cf5 1 \cf0 );\
                level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .add(product);\
            \}\
            
\f0\b \cf2 else
\f1\b0 \cf0 \{\
                level.
\f0\b \cf3 millFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime
\f1\b0 \cf0 ++;\
            \}\
        \}\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 && level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredientExistence
\f1\b0 \cf0 )\{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime 
\f1\b0 \cf0 >=level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 maxDuration
\f1\b0 \cf0 )\{\
                level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime 
\f1\b0 \cf0 = \cf5 0\cf0 ;\
                level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredientExistence 
\f1\b0 \cf0 = 
\f0\b \cf2 false
\f1\b0 \cf0 ;\
                Ingredient.Milk product = 
\f0\b \cf2 new 
\f1\b0 \cf0 Ingredient.Milk(\cf5 1\cf0 ,\cf5 1 \cf0 );\
                level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .add(product);\
            \}\
            
\f0\b \cf2 else
\f1\b0 \cf0 \{\
                level.
\f0\b \cf3 milkFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime
\f1\b0 \cf0 ++;\
            \}\
        \}\
\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 && level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 ingredientExistence
\f1\b0 \cf0 )\{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 productTime 
\f1\b0 \cf0 >=level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 maxDuration
\f1\b0 \cf0 )\{\
                level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 productTime 
\f1\b0 \cf0 = \cf5 0\cf0 ;\
                level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 ingredientExistence 
\f1\b0 \cf0 = 
\f0\b \cf2 false
\f1\b0 \cf0 ;\
                Ingredient.Bread product = 
\f0\b \cf2 new 
\f1\b0 \cf0 Ingredient.Bread(\cf5 1\cf0 ,\cf5 1 \cf0 );\
                level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .add(product);\
            \}\
            
\f0\b \cf2 else
\f1\b0 \cf0 \{\
                level.
\f0\b \cf3 bakery
\f1\b0 \cf0 .
\f0\b \cf3 productTime
\f1\b0 \cf0 ++;\
            \}\
        \}\
\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 && level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredientExistence
\f1\b0 \cf0 )\{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime 
\f1\b0 \cf0 >=level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 maxDuration
\f1\b0 \cf0 )\{\
                level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime 
\f1\b0 \cf0 = \cf5 0\cf0 ;\
                level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredientExistence 
\f1\b0 \cf0 = 
\f0\b \cf2 false
\f1\b0 \cf0 ;\
                Ingredient.Weave product = 
\f0\b \cf2 new 
\f1\b0 \cf0 Ingredient.Weave(\cf5 1\cf0 ,\cf5 1 \cf0 );\
                level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .add(product);\
            \}\
            
\f0\b \cf2 else
\f1\b0 \cf0 \{\
                level.
\f0\b \cf3 weaveFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime
\f1\b0 \cf0 ++;\
            \}\
        \}\
\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 existence 
\f1\b0 \cf0 && level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredientExistence
\f1\b0 \cf0 )\{\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime 
\f1\b0 \cf0 >=level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 maxDuration
\f1\b0 \cf0 )\{\
                level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime 
\f1\b0 \cf0 = \cf5 0\cf0 ;\
                level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 ingredientExistence 
\f1\b0 \cf0 = 
\f0\b \cf2 false
\f1\b0 \cf0 ;\
                Ingredient.IceCream product = 
\f0\b \cf2 new 
\f1\b0 \cf0 Ingredient.IceCream(\cf5 1\cf0 ,\cf5 1 \cf0 );\
                level.
\f0\b \cf3 ingredients
\f1\b0 \cf0 .add(product);\
            \}\
            
\f0\b \cf2 else
\f1\b0 \cf0 \{\
                level.
\f0\b \cf3 iceFactory
\f1\b0 \cf0 .
\f0\b \cf3 productTime
\f1\b0 \cf0 ++;\
            \}\
        \}\
    \}\
\
\
}