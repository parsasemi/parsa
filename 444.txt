public DomesticAnimals StringToAnimalDomestic (String name) throws IOException {
        if (name.equals("chicken")) {
            save();
            return new DomesticAnimals.Chicken(1,1);
        }
        if (name.equals("turkey")) {
            save();
            return new DomesticAnimals.Turkey(1,1);
        }
        if (name.equals("buffalo")) {
            save();
            return new DomesticAnimals.Buffalo(1,1);
        } else
            return null;
    }
    public void MotorLoad(Level level, String name) throws IOException {
        Ingredient ingr = StringToIngr(name);
        WildAnimals wild = StringToAnimal(name);
        DomesticAnimals dom = StringToAnimalDomestic(name);
        int t = 0;
        if (ingr != null) {
            int e = level.storage.names.size();
            for (int i = e - 1; i >= 0; i--) {
                if (level.storage.names.get(i).equals(name)) {
                    t = 1;
                    if (level.motorCycle.capacity >= ingr.size) {
                        level.motorCycle.capacity -= ingr.size;
                        level.storage.names.remove(i);
                        level.storage.quantities.remove(i);
                        level.storage.capacity += ingr.size;
                        level.motorCycle.names.add(name);
                        level.motorCycle.quantities.add(1);
                        level.motorCycle.coin += ingr.price;
                        System.out.println(name + " loaded successfully!");
                    } else {
                        System.out.println("There is not enough space in the truck!");
                    }
                    break;
                }
            }
            if (t == 0)
                System.out.println("There is not such an ingredient.");
        } else if (wild != null) {
            int e = level.storage.names.size();
            for (int i = e - 1; i >= 0; i--) {
                if (level.storage.names.get(i).equals(name)) {
                    t = 1;
                    if (level.motorCycle.capacity >= wild.capacity) {
                        level.motorCycle.capacity -= wild.capacity;
                        level.storage.names.remove(i);
                        level.storage.quantities.remove(i);
                        level.storage.capacity += wild.capacity;
                        level.motorCycle.names.add(name);
                        level.motorCycle.quantities.add(1);
                        level.motorCycle.coin += wild.sellPrice;
                        System.out.println(name + " loaded successfully!");
                    } else {
                        System.out.println("There is not enough space in the truck!");
                    }
                    break;
                }
            }
            if (t == 0)
                System.out.println("There is not such an animal.");
        }
        else if (dom != null) {
            int e = level.storage.names.size();
            for (int i = e - 1; i >= 0; i--) {
                if (level.storage.names.get(i).equals(name)) {
                    t = 1;
                    if (level.motorCycle.capacity >= dom.capacity) {
                        level.motorCycle.capacity -= dom.capacity;
                        level.storage.names.remove(i);
                        level.storage.quantities.remove(i);
                        level.storage.capacity += dom.capacity;
                        level.motorCycle.names.add(name);
                        level.motorCycle.quantities.add(1);
                        level.motorCycle.coin += dom.sellPrice;
                        System.out.println(name + " loaded successfully!");
                    } else {
                        System.out.println("There is not enough space in the truck!");
                    }
                    break;
                }
            }
            if (t == 0)
                System.out.println("There is not such an animal.");
        }
        if (ingr == null && wild == null && dom == null)
            System.out.println("Please enter a valid name.");
        save();
    }

    public void MotorUnload(Level level, String name) throws IOException {
        Ingredient ingr = StringToIngr(name);
        WildAnimals wild = StringToAnimal(name);
        DomesticAnimals dom = StringToAnimalDomestic(name);
        int t = 0;
        if (ingr != null) {
            int e = level.storage.names.size();
            for (int i = e - 1; i >= 0; i--) {
                if (level.motorCycle.names.get(i).equals(name)) {
                    if (level.storage.capacity >= ingr.size) {
                        t = 1;
                        level.motorCycle.names.remove(i);
                        level.motorCycle.quantities.remove(i);
                        level.motorCycle.capacity += ingr.size;
                        level.storage.capacity -= ingr.size;
                        level.storage.names.add(name);
                        level.storage.quantities.add(1);
                        level.motorCycle.coin -= ingr.price;
                        System.out.println(name + " unloaded successfully!");
                    } else {
                        System.out.println("There is not enough space in the storage.");
                    }
                }
            }
            if (t == 0) {
                System.out.println("There is not such an ingredient.");
            }
        } else if (wild != null) {
            int e = level.storage.names.size();
            for (int i = e - 1; i >= 0; i--) {
                if (level.motorCycle.names.get(i).equals(name)) {
                    if (level.storage.capacity >= wild.capacity) {
                        t = 1;
                        level.motorCycle.names.remove(i);
                        level.motorCycle.quantities.remove(i);
                        level.motorCycle.capacity += wild.capacity;
                        level.storage.capacity -= wild.capacity;
                        level.storage.names.add(name);
                        level.storage.quantities.add(1);
                        level.motorCycle.coin -= wild.sellPrice;
                        System.out.println(name + " unloaded successfully!");
                    } else {
                        System.out.println("There is not enough space in the storage.");
                    }
                }
            }
            if (t == 0) {
                System.out.println("There is not such an animal.");
            }
        }
        else if (dom != null) {
            int e = level.storage.names.size();
            for (int i = e - 1; i >= 0; i--) {
                if (level.motorCycle.names.get(i).equals(name)) {
                    if (level.storage.capacity >= dom.capacity) {
                        t = 1;
                        level.motorCycle.names.remove(i);
                        level.motorCycle.quantities.remove(i);
                        level.motorCycle.capacity += dom.capacity;
                        level.storage.capacity -= dom.capacity;
                        level.storage.names.add(name);
                        level.storage.quantities.add(1);
                        level.motorCycle.coin -= dom.sellPrice;
                        System.out.println(name + " unloaded successfully!");
                    } else {
                        System.out.println("There is not enough space in the storage.");
                    }
                }
            }
            if (t == 0) {
                System.out.println("There is not such an animal.");
            }
        }
        if (ingr == null && wild == null && dom == null)
            System.out.println("Please enter a valid name.");
        save();
    }