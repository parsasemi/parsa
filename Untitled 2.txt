public void FactoryCounter(Level level) throws IOException {
        Random random = new Random();
        int a = random.nextInt(6) + 1;
        int b = random.nextInt(6) + 1;
        if (level.sewingFactory.existence) {
            if (level.sewingFactory.productTime >= level.sewingFactory.maxDuration) {
                if (level.sewingFactory.ingredientExistence) {
                    level.sewingFactory.productTime = -1;
                    level.sewingFactory.ingredientExistence = false;
                    Ingredient.Cloth product = new Ingredient.Cloth(a, b);
                    level.ingredients.add(product);
                }
                if (level.sewingFactory.ingredientExistence2) {
                    level.sewingFactory.productTime = -1;
                    level.sewingFactory.ingredientExistence2 = false;
                    Ingredient.Cloth product = new Ingredient.Cloth(a, b);
                    level.ingredients.add(product);
                    level.ingredients.add(product);
                }
            } else if (level.sewingFactory.productTime > -1) {
                if (level.sewingFactory.ingredientExistence) {
                    level.sewingFactory.productTime += level.sewingFactory.level;
                }
                if (level.sewingFactory.ingredientExistence2) {
                    level.sewingFactory.productTime++;
                }
            }
        }

        if (level.millFactory.existence) {
            if (level.millFactory.productTime >= level.millFactory.maxDuration) {
                if (level.millFactory.ingredientExistence) {
                    level.millFactory.productTime = -1;
                    level.millFactory.ingredientExistence = false;
                    level.millFactory.ingredientExistence2 = false;
                    Ingredient.Flour product = new Ingredient.Flour(a, b);
                    level.ingredients.add(product);
                }
                if (level.millFactory.ingredientExistence2) {
                    level.millFactory.productTime = -1;
                    level.millFactory.ingredientExistence2 = false;
                    level.millFactory.ingredientExistence = false;
                    Ingredient.Flour product = new Ingredient.Flour(a, b);
                    level.ingredients.add(product);
                    level.ingredients.add(product);
                }
            } else if (level.millFactory.productTime > -1) {
                if (level.millFactory.ingredientExistence) {
                    level.millFactory.productTime += level.millFactory.level;
                    System.out.println(" Line 2466 : " + level.millFactory.level);
                }
                if (level.millFactory.ingredientExistence2) {
                    level.millFactory.productTime++;
                }
            }
        }

        if (level.milkFactory.existence) {
            if (level.milkFactory.productTime >= level.milkFactory.maxDuration) {
                if (level.milkFactory.ingredientExistence) {
                    level.milkFactory.productTime = -1;
                    level.milkFactory.ingredientExistence = false;
                    Ingredient.CMilk product = new Ingredient.CMilk(a, b);
                    level.ingredients.add(product);
                }
                if (level.milkFactory.ingredientExistence2) {
                    level.milkFactory.productTime = -1;
                    level.milkFactory.ingredientExistence2 = false;
                    Ingredient.CMilk product = new Ingredient.CMilk(a, b);
                    level.ingredients.add(product);
                    level.ingredients.add(product);
                }
            } else if (level.milkFactory.productTime > -1) {
                if (level.milkFactory.ingredientExistence) {
                    level.milkFactory.productTime += level.milkFactory.level;
                }
                if (level.milkFactory.ingredientExistence2) {
                    level.milkFactory.productTime++;
                }
            }
        }

        if (level.bakery.existence) {
            if (level.bakery.productTime >= level.bakery.maxDuration) {
                if (level.bakery.ingredientExistence) {
                    level.bakery.productTime = -1;
                    level.bakery.ingredientExistence = false;
                    Ingredient.Bread product = new Ingredient.Bread(a, b);
                    level.ingredients.add(product);
                }
                if (level.bakery.ingredientExistence2) {
                    level.bakery.productTime = -1;
                    level.bakery.ingredientExistence2 = false;
                    Ingredient.Bread product = new Ingredient.Bread(a, b);
                    level.ingredients.add(product);
                    level.ingredients.add(product);
                }
            } else if (level.bakery.productTime > -1) {
                if (level.bakery.ingredientExistence) {
                    level.bakery.productTime += level.bakery.level;
                }
                if (level.bakery.ingredientExistence2) {
                    level.bakery.productTime++;
                }
            }
        }

        if (level.weaveFactory.existence) {
            if (level.weaveFactory.productTime >= level.weaveFactory.maxDuration) {
                if (level.weaveFactory.ingredientExistence) {
                    level.weaveFactory.productTime = -1;
                    level.weaveFactory.ingredientExistence = false;
                    Ingredient.Weave product = new Ingredient.Weave(a, b);
                    level.ingredients.add(product);
                }
                if (level.weaveFactory.ingredientExistence2) {
                    level.weaveFactory.productTime = -1;
                    level.weaveFactory.ingredientExistence2 = false;
                    Ingredient.Weave product = new Ingredient.Weave(a, b);
                    level.ingredients.add(product);
                    level.ingredients.add(product);
                }
            } else if (level.weaveFactory.productTime > -1) {
                if (level.weaveFactory.ingredientExistence) {
                    level.weaveFactory.productTime += level.weaveFactory.level;
                }
                if (level.weaveFactory.ingredientExistence2) {
                    level.weaveFactory.productTime++;
                }
            }
        }

        if (level.iceFactory.existence) {
            if (level.iceFactory.productTime >= level.iceFactory.maxDuration) {
                if (level.iceFactory.ingredientExistence) {
                    level.iceFactory.productTime = -1;
                    level.iceFactory.ingredientExistence = false;
                    Ingredient.IceCream product = new Ingredient.IceCream(a, b);
                    level.ingredients.add(product);
                }
                if (level.iceFactory.ingredientExistence2) {
                    level.iceFactory.productTime = -1;
                    level.iceFactory.ingredientExistence2 = false;
                    Ingredient.IceCream product = new Ingredient.IceCream(a, b);
                    level.ingredients.add(product);
                    level.ingredients.add(product);
                }
            } else if (level.iceFactory.productTime > -1) {
                if (level.iceFactory.ingredientExistence) {
                    level.iceFactory.productTime += level.iceFactory.level;
                }
                if (level.iceFactory.ingredientExistence2) {
                    level.iceFactory.productTime++;
                }
            }
        }
        if (level.chickenFactory.existence) {
            if (level.chickenFactory.productTime >= level.chickenFactory.maxDuration) {
                if (level.chickenFactory.ingredientExistence) {
                    level.chickenFactory.productTime = -1;
                    level.chickenFactory.ingredientExistence = false;
                    DomesticAnimals.Chicken chicken = new DomesticAnimals.Chicken(a,b);
                    level.chickens.add(chicken);
                }
                if (level.chickenFactory.ingredientExistence2) {
                    level.chickenFactory.productTime = -1;
                    level.chickenFactory.ingredientExistence2 = false;
                    DomesticAnimals.Chicken product = new DomesticAnimals.Chicken(a, b);
                    level.chickens.add(product);
                    level.chickens.add(product);
                }
            } else if (level.chickenFactory.productTime > -1) {
                if (level.chickenFactory.ingredientExistence) {
                    level.chickenFactory.productTime += level.chickenFactory.level;
                }
                if (level.chickenFactory.ingredientExistence2) {
                    level.chickenFactory.productTime++;
                }
            }
        }
        save();
    }





public void Build(Level level, String name) throws IOException {
        if (name.equals("weavefactory")) {
            if (level.weaveFactory.existence == false) {
                if (level.coin >= level.weaveFactory.buildPrice) {
                    level.weaveFactory.existence = true;
                    level.coin -= level.weaveFactory.buildPrice;
                    logger("info", "build weave factory", level);
                } else
                    System.out.println("There is not enough money to build the factory.");
            } else {
                System.out.println("This factory can't be built again.");
            }
        } else if (name.equals("millfactory")) {
            if (level.millFactory.existence == false) {
                if (level.coin >= level.millFactory.buildPrice) {
                    level.millFactory.existence = true;
                    level.coin -= level.millFactory.buildPrice;
                    logger("info", "build mill factory", level);
                } else
                    System.out.println("There is not enough money to build the factory.");
            } else {
                System.out.println("This factory can't be built again.");
            }
        } else if (name.equals("milkfactory")) {
            if (level.milkFactory.existence == false) {
                if (level.coin >= level.milkFactory.buildPrice) {
                    level.milkFactory.existence = true;
                    level.coin -= level.milkFactory.buildPrice;
                    logger("info", "build milk factory", level);
                } else
                    System.out.println("There is not enough money to build the factory.");
            } else {
                System.out.println("This factory can't be built again.");
            }

        } else if (name.equals("bakery")) {
            if (level.bakery.existence == false) {
                if (level.coin >= level.bakery.buildPrice) {
                    level.bakery.existence = true;
                    level.coin -= level.bakery.buildPrice;
                    logger("info", "build bakery", level);
                } else
                    System.out.println("There is not enough money to build the factory.");
            } else {
                System.out.println("This factory can't be built again.");
            }

        } else if (name.equals("sewingfactory")) {
            if (level.sewingFactory.existence == false) {
                if (level.coin >= level.sewingFactory.buildPrice) {
                    level.sewingFactory.existence = true;
                    level.coin -= level.sewingFactory.buildPrice;
                    logger("info", "build sewing", level);
                } else
                    System.out.println("There is not enough money to build the factory.");
            } else {
                System.out.println("This factory can't be built again.");
            }

        } else if (name.equals("icefactory")) {
            if (level.iceFactory.existence == false) {
                if (level.coin >= level.iceFactory.buildPrice) {
                    level.iceFactory.existence = true;
                    level.coin -= level.iceFactory.buildPrice;
                    logger("info", "build ice factory", level);
                } else
                    System.out.println("There is not enough money to build the factory.");
            } else {
                System.out.println("This factory can't be built again.");
            }
        }
            else if (name.equals("chickenfactory")) {
                if (level.chickenFactory.existence == false) {
                    if (level.coin >= level.chickenFactory.buildPrice) {
                        level.chickenFactory.existence = true;
                        level.coin -= level.chickenFactory.buildPrice;
                        logger("info", "build chicken factory", level);
                    } else
                        System.out.println("There is not enough money to build the factory.");
                } else {
                    System.out.println("This factory can't be built again.");
                }

        } else {
            System.out.println("Not a valid name!");
        }
        save();
    }




public void Work(Level level, String name) throws IOException {
        String[] names = {"weavefactory", "millfactory", "milkfactory", "bakery", "sewingfactory", "icefactory", "chickenfactory"};
        int a = -1;
        for (int i = 0; i < names.length; i++) {
            if (name.equals(names[i])) {
                a = i;
                break;
            }
        }
        if (a == -1) {
            System.out.println("Not a valid name.");
        } else {
            logger("info", "build " + name, level);
            int t = 0;
            if (a == 0) {
                if (level.weaveFactory.existence) {
                    if (level.weaveFactory.productTime == 0) {
                        if (level.weaveFactory.level == 1) {
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.weaveFactory.ingredient)) {
                                    t = 1;
                                    level.storage.names.remove(i);
                                    level.storage.quantities.remove(i);
                                    Ingredient.Feather feather = new Ingredient.Feather(1, 1);
                                    level.storage.capacity -= feather.size;
                                    level.weaveFactory.ingredientExistence = true;
                                    // Production
                                }
                            }
                        }

                        if (level.weaveFactory.level == 2) {
                            int r = 0;
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.weaveFactory.ingredient)) {
                                    r++;
                                }
                            }
                            if (r >= 2) {
                                r = 2;
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.weaveFactory.ingredient) && r > 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.Feather feather = new Ingredient.Feather(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.weaveFactory.ingredientExistence2 = true;
                                    }
                                }
                            }
                            if (r == 1) {
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.weaveFactory.ingredient) && r != 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.Feather feather = new Ingredient.Feather(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.weaveFactory.ingredientExistence = true;
                                    }
                                }
                            }
                        }

                        if (t == 0)
                            System.out.println("There is not enough ingredient to start!");

                    } else if (level.weaveFactory.productTime > 0) {
                        System.out.println("The factory is working now, You must wait to end the production.");
                    }
                } else {
                    System.out.println("You must first build the factory.");
                }
            }

            if (a == 1) {
                if (level.millFactory.existence) {
                    if (level.millFactory.productTime == 0) {
                        if (level.millFactory.level == 1) {
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.millFactory.ingredient)) {
                                    t = 1;
                                    level.storage.names.remove(i);
                                    level.storage.quantities.remove(i);
                                    Ingredient.Egg feather = new Ingredient.Egg(1, 1);
                                    level.storage.capacity -= feather.size;
                                    level.millFactory.ingredientExistence = true;
                                    level.millFactory.ingredientExistence2 = false;
                                    // Production
                                }
                            }
                        }

                        if (level.millFactory.level == 2) {
                            int r = 0;
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.millFactory.ingredient)) {
                                    r++;
                                }
                            }
                            if (r >= 2) {
                                r = 2;
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.millFactory.ingredient) && r > 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.Egg feather = new Ingredient.Egg(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.millFactory.ingredientExistence2 = true;
                                        level.millFactory.ingredientExistence = false;
                                    }
                                }
                            }
                            if (r == 1) {
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.millFactory.ingredient) && r != 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.Egg feather = new Ingredient.Egg(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.millFactory.ingredientExistence = true;
                                        level.millFactory.ingredientExistence2 = false;
                                    }
                                }
                            }
                        }

                        if (t == 0)
                            System.out.println("There is not enough ingredient to start!");

                    } else if (level.millFactory.productTime > 0) {
                        System.out.println("The factory is working now, You must wait to end the production.");
                    }
                } else {
                    System.out.println("You must first build the factory.");
                }
            }

            if (a == 2) {
                if (level.milkFactory.existence) {
                    if (level.milkFactory.productTime == 0) {
                        if (level.milkFactory.level == 1) {
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.milkFactory.ingredient)) {
                                    t = 1;
                                    level.storage.names.remove(i);
                                    level.storage.quantities.remove(i);
                                    Ingredient.Milk feather = new Ingredient.Milk(1, 1);
                                    level.storage.capacity -= feather.size;
                                    level.milkFactory.ingredientExistence = true;
                                    // Production
                                }
                            }
                        }

                        if (level.milkFactory.level == 2) {
                            int r = 0;
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.milkFactory.ingredient)) {
                                    r++;
                                }
                            }
                            if (r >= 2) {
                                r = 2;
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.milkFactory.ingredient) && r > 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.Milk feather = new Ingredient.Milk(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.milkFactory.ingredientExistence2 = true;
                                    }
                                }
                            }
                            if (r == 1) {
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.milkFactory.ingredient) && r != 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.Milk feather = new Ingredient.Milk(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.milkFactory.ingredientExistence = true;
                                    }
                                }
                            }
                        }

                        if (t == 0)
                            System.out.println("There is not enough ingredient to start!");

                    } else if (level.milkFactory.productTime > 0) {
                        System.out.println("The factory is working now, You must wait to end the production.");
                    }
                } else {
                    System.out.println("You must first build the factory.");
                }
            }

            if (a == 3) {
                if (level.bakery.existence) {
                    if (level.bakery.productTime == 0) {
                        if (level.bakery.level == 1) {
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.bakery.ingredient)) {
                                    t = 1;
                                    level.storage.names.remove(i);
                                    level.storage.quantities.remove(i);
                                    Ingredient.Flour feather = new Ingredient.Flour(1, 1);
                                    level.storage.capacity -= feather.size;
                                    level.bakery.ingredientExistence = true;
                                    // Production
                                }
                            }
                        }

                        if (level.bakery.level == 2) {
                            int r = 0;
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.bakery.ingredient)) {
                                    r++;
                                }
                            }
                            if (r >= 2) {
                                r = 2;
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.bakery.ingredient) && r > 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.Flour feather = new Ingredient.Flour(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.bakery.ingredientExistence2 = true;
                                    }
                                }
                            }
                            if (r == 1) {
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.bakery.ingredient) && r != 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.Flour feather = new Ingredient.Flour(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.bakery.ingredientExistence = true;
                                    }
                                }
                            }
                        }

                        if (t == 0)
                            System.out.println("There is not enough ingredient to start!");

                    } else if (level.bakery.productTime > 0) {
                        System.out.println("The factory is working now, You must wait to end the production.");
                    }
                } else {
                    System.out.println("You must first build the factory.");
                }
            }

            if (a == 4) {
                if (level.sewingFactory.existence) {
                    if (level.sewingFactory.productTime == 0) {
                        if (level.sewingFactory.level == 1) {
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.sewingFactory.ingredient)) {
                                    t = 1;
                                    level.storage.names.remove(i);
                                    level.storage.quantities.remove(i);
                                    Ingredient.Weave feather = new Ingredient.Weave(1, 1);
                                    level.storage.capacity -= feather.size;
                                    level.sewingFactory.ingredientExistence = true;
                                    // Production
                                }
                            }
                        }

                        if (level.sewingFactory.level == 2) {
                            int r = 0;
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.sewingFactory.ingredient)) {
                                    r++;
                                }
                            }
                            if (r >= 2) {
                                r = 2;
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.sewingFactory.ingredient) && r > 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.Weave feather = new Ingredient.Weave(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.sewingFactory.ingredientExistence2 = true;
                                    }
                                }
                            }
                            if (r == 1) {
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.sewingFactory.ingredient) && r != 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.Weave feather = new Ingredient.Weave(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.sewingFactory.ingredientExistence = true;
                                    }
                                }
                            }
                        }

                        if (t == 0)
                            System.out.println("There is not enough ingredient to start!");

                    } else {
                        System.out.println("The factory is working now, You must wait to end the production.");
                    }
                } else {
                    System.out.println("You must first build the factory.");
                }
            }

            if (a == 5) {
                if (level.iceFactory.existence) {
                    if (level.iceFactory.productTime == 0) {
                        if (level.iceFactory.level == 1) {
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.iceFactory.ingredient)) {
                                    t = 1;
                                    level.storage.names.remove(i);
                                    level.storage.quantities.remove(i);
                                    Ingredient.CMilk feather = new Ingredient.CMilk(1, 1);
                                    level.storage.capacity -= feather.size;
                                    level.iceFactory.ingredientExistence = true;
                                    // Production
                                }
                            }
                        }

                        if (level.iceFactory.level == 2) {
                            int r = 0;
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.iceFactory.ingredient)) {
                                    r++;
                                }
                            }
                            if (r >= 2) {
                                r = 2;
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.iceFactory.ingredient) && r > 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.CMilk feather = new Ingredient.CMilk(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.iceFactory.ingredientExistence2 = true;
                                    }
                                }
                            }
                            if (r == 1) {
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.iceFactory.ingredient) && r != 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.CMilk feather = new Ingredient.CMilk(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.iceFactory.ingredientExistence = true;
                                    }
                                }
                            }
                        }

                        if (t == 0)
                            System.out.println("There is not enough ingredient to start!");

                    } else if (level.iceFactory.productTime > 0) {
                        System.out.println("The factory is working now, You must wait to end the production.");
                    }
                } else {
                    System.out.println("You must first build the factory.");
                }
            }
            if (a == 6) {
                if (level.chickenFactory.existence) {
                    if (level.chickenFactory.productTime == 0) {
                        if (level.chickenFactory.level == 1) {
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.chickenFactory.ingredient)) {
                                    t = 1;
                                    level.storage.names.remove(i);
                                    level.storage.quantities.remove(i);
                                    Ingredient.Egg feather = new Ingredient.Egg(1, 1);
                                    level.storage.capacity -= feather.size;
                                    level.chickenFactory.ingredientExistence = true;
                                    // Production
                                }
                            }
                        }

                        if (level.iceFactory.level == 2) {
                            int r = 0;
                            for (int i = 0; i < level.storage.names.size(); i++) {
                                if (level.storage.names.get(i).equals(level.chickenFactory.ingredient)) {
                                    r++;
                                }
                            }
                            if (r >= 2) {
                                r = 2;
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.chickenFactory.ingredient) && r > 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.Egg feather = new Ingredient.Egg(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.chickenFactory.ingredientExistence2 = true;
                                    }
                                }
                            }
                            if (r == 1) {
                                int e = level.storage.names.size();
                                for (int i = e - 1; i >= 0; i--) {
                                    if (level.storage.names.get(i).equals(level.chickenFactory.ingredient) && r != 0) {
                                        r--;
                                        t = 1;
                                        level.storage.names.remove(i);
                                        level.storage.quantities.remove(i);
                                        Ingredient.Egg feather = new Ingredient.Egg(1, 1);
                                        level.storage.capacity -= feather.size;
                                        level.chickenFactory.ingredientExistence = true;
                                    }
                                }
                            }
                        }

                        if (t == 0)
                            System.out.println("There is not enough ingredient to start!");

                    } else if (level.iceFactory.productTime > 0) {
                        System.out.println("The factory is working now, You must wait to end the production.");
                    }
                } else {
                    System.out.println("You must first build the factory.");
                }
            }
        }
    }